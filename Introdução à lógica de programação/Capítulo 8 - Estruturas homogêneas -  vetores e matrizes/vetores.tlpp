#include 'tlpp-core.th'

// Exercício 1
//Crie um array contendo na primeira posição o nome de um estado brasileiro, na segunda posição a sigla do estado.

User function exercicio1()

    Local aEstado := array(3)

    aEstado[1] := { "São Paulo", "SP" }
    aEstado[2] := { "Rio de Janeiro", "RJ"}
    aEstado[3] := { "Minas Gerais", "MG" }

    aSize(aEstado, 0)

    aEstado := {}

    Aadd(aEstado, { "São Paulo", "SP" })
    Aadd(aEstado, { "Rio de Janeiro", "RJ"})
    Aadd(aEstado, { "Minas Gerais", "MG" })

    aSize(aEstado, 0)

return

// Exercício 2
//Crie um programa que realiza busca em um array de estados brasileiros, o programa deve pesquisar pelo nome do estado e retornar a sigla do estado.

User function exercicio2()

    Local aEstado := {}
    Local nPosicao := 0

    Aadd(aEstado, { "São Paulo", "SP" })
    Aadd(aEstado, { "Rio de Janeiro", "RJ"})
    Aadd(aEstado, { "Minas Gerais", "MG" })

    nPosicao := ascan(aEstado, {|x| x[2] == "MG"})

    Conout(aEstado[nPosicao][2])


Return

// Exercício 3
//Crie um programa que realiza busca em um array de estados brasileiros, o programa deve pesquisar pela sigla do estado e retornar o nome do estado.

User function exercicio3()

    Local aEstado := {}
    Local nPosicao := 0

    Aadd(aEstado, { "São Paulo", "SP" })
    Aadd(aEstado, { "Rio de Janeiro", "RJ"})
    Aadd(aEstado, { "Minas Gerais", "MG" })


    nPosicao := ascan(aEstado, {|x| x[2] == "SP"})

    Conout(aEstado[nPosicao][1])

Return

// Exercício 4
/*
Crie um programa que realiza busca em um array de estados brasileiros, e este programa pode receber como parâmetro um estado ou uma sigla.

O programa deve utilizar o parâmetro que recebeu para realizar a busca e retornar o nome do estado ou a sigla do estado.

Exemplo:

Programa recebeu como parâmetro o estado 'São Paulo', então deve retornar a sigla 'SP'.
ou
Programa recebeu como parâmetro a sigla 'SP', então deve retornar o nome do estado 'São Paulo'.
*/

User function exercicio4(cEstado, cUf)

    Local aEstado := {}
    Local nPosicao := 0
    Local cParametro := ""
    Local cRetorno := ""
    Local nX := 0

    default cEstado := ""
    default cUf := ""

    Aadd(aEstado, { "São Paulo", "SP" })
    Aadd(aEstado, { "Rio de Janeiro", "RJ"})
    Aadd(aEstado, { "Minas Gerais", "MG" })


    If !Empty(cEstado)
        cParametro := upper(cEstado)
        nPosicao := ascan(aEstado, {|x| upper(x[1]) == cParametro})
        If .not. EMPTY( nPosicao )
            cRetorno := aEstado[nPosicao][2]
        Endif
    Else
        cParametro := upper(cUf)
        nPosicao := ascan(aEstado, {|x| upper(x[2]) == cParametro})
        If .not. EMPTY( nPosicao )
            cRetorno := aEstado[nPosicao][1]
        Endif
    Endif
    
    If nPosicao > 0
        Conout(cRetorno)
    Else        
        Conout("Estado não encontrado")
    Endif
    
    If Empty(cUf)
        Conout("Parâmetro não informado")
    Else
        u_exercicio4(cRetorno )
    Endif
    

Return

// Exercício 5
//
/*Considero os seguintes códigos para cada estado brasileiro:

Roraima = 11
Acre = 12
Amazonas = 13
Rondônia = 14
Pará = 15
Amapá = 16
Tocantins = 17
Maranhão = 21
Piauí = 22
Ceará = 23
Rio Grande do Norte = 24
Paraíba = 25
Pernambuco = 26
Alagoas = 27
Sergipe = 28
Bahia = 29
Minas Gerais = 31
Espírito Santo = 32
Rio de Janeiro = 33
São Paulo = 35
Paraná = 41
Santa Catarina = 42
Rio Grande do Sul = 43
Mato Grosso do Sul = 50
Mato Grosso = 51
Goiás = 52
Distrito Federal = 53

Crie um array contendo os nomes, siglas e códigos de cada estado brasileiro.
*/

User function exercicio5()

    Local aEstado := {}

    Aadd(aEstado, { "Roraima", "RR", 11 })
    Aadd(aEstado, { "Acre", "AC", 12 })
    Aadd(aEstado, { "Amazonas", "AM", 13 })
    Aadd(aEstado, { "Rondônia", "RO", 14 })
    Aadd(aEstado, { "Pará", "PA", 15 })
    Aadd(aEstado, { "Amapá", "AP", 16 })
    Aadd(aEstado, { "Tocantins", "TO", 17 })
    Aadd(aEstado, { "Maranhão", "MA", 21 })
    Aadd(aEstado, { "Piauí", "PI", 22 })
    Aadd(aEstado, { "Ceará", "CE", 23 })
    Aadd(aEstado, { "Rio Grande do Norte", "RN", 24 })
    Aadd(aEstado, { "Paraíba", "PB", 25 })
    Aadd(aEstado, { "Pernambuco", "PE", 26 })
    Aadd(aEstado, { "Alagoas", "AL", 27 })
    Aadd(aEstado, { "Sergipe", "SE", 28 })
    Aadd(aEstado, { "Bahia", "BA", 29 })
    Aadd(aEstado, { "Minas Gerais", "MG", 31 })
    Aadd(aEstado, { "Espírito Santo", "ES", 32 })
    Aadd(aEstado, { "Rio de Janeiro", "RJ", 33 })
    Aadd(aEstado, { "São Paulo", "SP", 35 })
    Aadd(aEstado, { "Paraná", "PR", 41 })
    Aadd(aEstado, { "Santa Catarina", "SC", 42 })
    Aadd(aEstado, { "Rio Grande do Sul", "RS", 43 })
    Aadd(aEstado, { "Mato Grosso do Sul", "MS", 50 })
    Aadd(aEstado, { "Mato Grosso", "MT", 51 })
    Aadd(aEstado, { "Goiás", "GO", 52 })

    aSort(aEstado,,, {|x,y| x[1] < y[1]})

    Conout(aEstado)

    aSort(aEstado,,, {|x,y| x[2] < y[2]})

    Conout(aEstado)

    aSort(aEstado,,, {|x,y| x[3] < y[3]})

    Conout(aEstado)

    aSize(aEstado, 0)

Return

// Exercício 6
/*
Considerando o array do exercício anterior, crie um programa que adiciona para cada estado brasileiro os código de área utilizados por cada estado.

Considere os códigos disponibilizado em [Discagem direta à distância](https://pt.wikipedia.org/wiki/Discagem_direta_%C3%A0_dist%C3%A2ncia)

Exemplo:

array: {'Roraima', 'RR', '11', '95'}


Imprima todos os estados e seus códigos de área.

*/

User function exercicio6()

    Local aEstado := {}
    Local aCodigoArea := {}
    Local nX := 0
    Local nY := 0

    Aadd(aEstado, { "Roraima", "RR", 11 })
    Aadd(aEstado, { "Acre", "AC", 12 })
    Aadd(aEstado, { "Amazonas", "AM", 13 })
    Aadd(aEstado, { "Rondônia", "RO", 14 })
    Aadd(aEstado, { "Pará", "PA", 15 })
    Aadd(aEstado, { "Amapá", "AP", 16 })
    Aadd(aEstado, { "Tocantins", "TO", 17 })
    Aadd(aEstado, { "Maranhão", "MA", 21 })
    Aadd(aEstado, { "Piauí", "PI", 22 })
    Aadd(aEstado, { "Ceará", "CE", 23 })
    Aadd(aEstado, { "Rio Grande do Norte", "RN", 24 })
    Aadd(aEstado, { "Paraíba", "PB", 25 })
    Aadd(aEstado, { "Pernambuco", "PE", 26 })
    Aadd(aEstado, { "Alagoas", "AL", 27 })
    Aadd(aEstado, { "Sergipe", "SE", 28 })
    Aadd(aEstado, { "Bahia", "BA", 29 })
    Aadd(aEstado, { "Minas Gerais", "MG", 31 })
    Aadd(aEstado, { "Espírito Santo", "ES", 32 })
    Aadd(aEstado, { "Rio de Janeiro", "RJ", 33 })
    Aadd(aEstado, { "São Paulo", "SP", 35 })
    Aadd(aEstado, { "Paraná", "PR", 41 })
    Aadd(aEstado, { "Santa Catarina", "SC", 42 })
    Aadd(aEstado, { "Rio Grande do Sul", "RS", 43 })
    Aadd(aEstado, { "Mato Grosso do Sul", "MS", 50 })
    Aadd(aEstado, { "Mato Grosso", "MT", 51 })
    Aadd(aEstado, { "Goiás", "GO", 52 })

    Aadd(aCodigoArea, { "São Paulo",{11,12,13,14,15,16,17,18,19} })
    Aadd(aCodigoArea, { "Rio de Janeiro",{21,22,24} })
    Aadd(aCodigoArea, { "Espírito Santo",{27,28} })
    Aadd(aCodigoArea, { "Minas Gerais",{31,32,33,34,35,37,38} })
    Aadd(aCodigoArea, { "Paraná",{41,42,43,44,45,46} })
    Aadd(aCodigoArea, { "Santa Catarina",{47,48,49} })
    Aadd(aCodigoArea, { "Rio Grande do Sul",{51,53,54,55} })    
    Aadd(aCodigoArea, { "Goiás",{62,64, 61} })
    Aadd(aCodigoArea, { "Tocantins",{63} })
    Aadd(aCodigoArea, { "Mato Grosso",{65,66} })
    Aadd(aCodigoArea, { "Mato Grosso do Sul",{67} })
    Aadd(aCodigoArea, { "Acre",{68} })
    Aadd(aCodigoArea, { "Rondônia",{69} })
    Aadd(aCodigoArea, { "Bahia",{71,73,74,75,77} })
    Aadd(aCodigoArea, { "Sergipe",{79} })
    Aadd(aCodigoArea, { "Pernambuco",{81,87} })
    Aadd(aCodigoArea, { "Alagoas",{82} })
    Aadd(aCodigoArea, { "Paraíba",{83} })
    Aadd(aCodigoArea, { "Rio Grande do Norte",{84} })
    Aadd(aCodigoArea, { "Ceará",{85,88} })
    Aadd(aCodigoArea, { "Piauí",{86,89} })
    Aadd(aCodigoArea, { "Pará",{91,93,94} })
    Aadd(aCodigoArea, { "Amazonas",{92,97} })
    Aadd(aCodigoArea, { "Roraima",{95} })
    Aadd(aCodigoArea, { "Amapá",{96} })
    Aadd(aCodigoArea, { "Maranhão",{98,99} })

    Conout(aEstado)
    Conout(aCodigoArea)

    //ordena os dois arrays para que as chaves sejam iguais

    aSort(aEstado,,, {|x,y| x[1] < y[1]})
    aSort(aCodigoArea,,, {|x,y| x[1] < y[1]})

    /*
    For nx := 1 To Len(aEstado)
        For ny := 1 To Len(aCodigoArea)
            If upper(aEstado[nx][1]) == upper(aCodigoArea[ny][1])                
                Aadd(aEstado[nx],aCodigoArea[ny][2])
                Exit
            Endif
        Next ny
    Next nx
    */
    For nx := 1 To Len(aEstado)
        ny := aScan(aCodigoArea, { |x| upper(x[1]) == upper(aEstado[nx][1])})
        IF ny > 0
            Aadd(aEstado[nx],aCodigoArea[ny][2])
        Endif
    Next nx

    //imprime o array com os códigos de área

    For nx := 1 To Len(aEstado)
        Conout(aEstado[nx][1])
        If Len(aEstado[nx]) > 3
            For ny := 1 To Len(aEstado[nx][4])
                Conout(aEstado[nx][4][ny])
            Next ny
        Endif
    Next nx

Return



